$Game_levels = [
{level:"1: Row Alignment",
 instructions:"Welcome to Flexbox Puzzle, a game where you help box by writing CSS code! Change the <code>flex-direction</code> property to arrange the boxes in a column instead of the default row layout. Experiment with horizontal layouts. ",
 solution:"flex_direction:column;" 
},
{level:"2: Align the Box",
 instructions:" To align the box horizontally within the container, use the <code>justify-content</code> property. Try <code>justify-content: center</code> to move the box to the middle. Experiment with other values like <code>flex-start</code> to align it to the left or <code>flex-end</code> to align it to the right. Observe how this property controls horizontal placement.",
 solution:"justify-content: center;" 
},
{
 level:"3: Reverse order",
 instructions:" Change the order of boxes visually by using the <code>flex-direction</code> property. Set <code>row-reverse</code> to reverse the horizontal order or <code>column-reverse</code> for vertical reversal. This rearranges the displayed order without affecting the underlying HTML structure.",
 solution:"flex-direction:row-reverse;" 
},
{
 level: "4: Space Distribution",
instructions: "Distribute the space between the boxes using the <code>justify-content</code> property. Try <code>space-between</code> to place equal space between items, <code>space-around</code> to add space around them, and <code>space-evenly</code> for uniform spacing. This helps create balanced and visually appealing layouts.",
solution: "justify-content:space-between;"
},
{
 level: "5: Align to Start",
 instructions: "Change the order of boxes visually by using the <code>flex-direction</code> property. Set <code>row-reverse</code> to reverse the horizontal order or <code>column-reverse</code> for vertical reversal. This rearranges the displayed order without affecting the underlying HTML structure.",
 solution: "align-items:flex-start;"
},
{
 level: "6: Vertical Centering",
 instructions: "Combine <code>align-items: center</code> and <code>justify-content: center</code> to position boxes at the center of the container, both vertically and horizontally. This demonstrates how Flexbox can align items along both axes simultaneously for precise placement.",
 solution: "align-items:center; justify-content:center;"
},
{
level: "7: Wrap Items",
instructions: "Enable wrapping for boxes with the <code>flex-wrap</code> property. Use <code>flex-wrap: wrap</code> to allow items to move to a new row or column when they exceed the containerâ€™s width. Test <code>nowrap</code> to see the default behavior and how it constrains items within one line.",
solution: "flex-wrap:wrap;"
},
{
 level: "10: Complex Alignment",
 instructions: "Combine multiple properties like <code>align-items</code>, <code>justify-content</code>, and <code>flex-wrap</code> to create intricate layouts. Use <code>align-items</code> to control vertical alignment, <code>justify-content</code> for horizontal spacing, and <code>flex-wrap</code> to enable multi-line layouts. Experiment with these to achieve the desired arrangement.",
 solution: "align-items:center; justify-content:space-evenly; flex-wrap:wrap;"
}
];